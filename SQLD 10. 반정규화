10. 반정규화

1. 개념 : 정규화된 데이터베이스의 성능을 향상시키기 위해 중복, 통합, 분리를 수행하는 데이터 모델링 기법

2. 특징
	- 테이블, 칼럼,관계의 반정규화 : 반정규화는 테이블 구조, 칼럼의 중복, 테이블간의 관계를 종합적으로 고려하여 설계, 성능 최적화를 위한 설계과정의 핵심임
	- 속성(칼럼)의 중복 허용 : 데이터 조회 성능을 개선하기 위해서 칼럼의 중복 저장을 시도함, 조인과정을 줄이고 데이터 접근 속도 올림
	- 과도한 반정규화의 무결성 침해 : 지나친 반정규화는 데이터 중복이 심해져 데이터 무결성이 침해될 수 있음, 데이터 변경시 일관성 유지가 어려워지며 관리 복잡도 증가

3. 반정규화의 사전 절차
	- 적용 전 : 반정규화 대상 조사, 데이터베이스 성능 개성를 위한 다른 방법 우선 검토, 데이터 무결성을 유지하며 최적화하기 위한 중요한 단계 (조사 : 범위 처리 빈도수 조사, 대량의 범위 처리 조사, 통계성 프로세스 조사, 테이블 조인 개수)
	- 다른 방법 
		- 뷰 생성 : 뷰는 자체적으로 직접적인 성능 향상을 제공하진 않음, 신중하게 설계된 뷰를 재사용함으로써 효율적인 데이터 접근을 가능하게 함, 반복조회 작업을 단순화하기 위해 사용됨
		- 클러스트링 : 자주 함께 사용되는 테이블 데이터를 디스크의 동일한 블록에 저장함으로써 조회 성능을 향상시키는 방법, 디스크 접근 속도를 줄이고, 관련 데이터를 더 빠르게 로드 가능
		- 인덱스 조정 : 성능 최적화를 위해 필요한 인덱스를 추가하거나 불필요한 인덱스를 삭제하고, 인덱스의 순서를 조정하는 작업, 효율적인 인덱스 설계는 검색 속도와 쿼리 성능을 크게 개선할 수 있음
		- 응용 애플리케이션 로직 변경 : 데이터 처리와 관련된 로직을 수정하여 데이터베이스에 대한 의존성을 줄이고 성능을 개선하는 방법, 애플리케이션 수준에서 최적화가 가능하다면, 반정규화 없이도 성능문제 해결가능

4. 반정규화 기법
	- 칼럼 반정규화
		- 중복 칼럼 추가 : 조인 횟수를 감소시키기 위해 다른 테이블의 칼럼을 중복 저장함 ex) 사원 테이블에 지점명이 없다면 지점번호를 조회해 지점명을 알아와야함, 이럴 때 중복 칼럼을 추가해 사원테이블에서 지점명을 바로 조회 가능하게 함
		- 파생 칼럼 추가 : 예상되는 질의에 대한 값을 미리 계산하여 중복 저장함 ex) 주문, 주문목록, 제품 테이블에서 만약 주문 총 금액이라는 칼럼이 없다면 항상 단가, 수량을 이용해서 계산해야되기 때문에 주문 총 금액을 주문에 추가해 놓음
		- 이력테이블 칼럼 추가 : 이력 데이터 처리의 성능 향상을 위해 종료 여부, 최근값 여부등 갈럼을 추가로 저장함 ex) 만약 직원의 차량이 여러대가 등록 되어 있는데 최근 등록 차량을 항상 확인하고 싶은 경우에는 따로 최근 등록 여부를 포함 시킴
		- PK의 의미적 분리를 위한 칼럼 추가 : PK가 복합 의미를 갖는 경우, 구성 요소 값의 조회 성능 향상을 위해 일반 속성을 추가함 ex) 차량 번호를 '서울 가 1234'로 등록 할 경우에 특정 지역 차량만 조회하고 싶을 때를 위해 지역 칼럼을 별도로 추가함
		- 데이터 복구를 위한 칼럼 추가 : 사용자의 실수나 응용프로그램의 오류로 인해 데이터가 잘못 처리될 경우, 원래 값으로의 복구를 위해 이전 데이터를 중복 저장함 ex) 주소 변경과정에서 잘못된 주소를 입력해서 기존 주소를 복구 할 경우를 위해 이전 주소 칼럼을 추가함

	- 테이블의 반정규화
		- 테이블 병합
			- 관계 병합 : 1:1 또는 1:n의 관계를 병합함(두개이상의 테이블 동시조회가 많은 경우)
			- 수퍼/서브타입 병합 : 슈퍼/서브타입 관계를 병합함, 여러 엔티티의 공통 속성과 개별 속성을 체계정으로 관리하기위해 사용, 데이터 양과 트랜잭션 유형에 따라 슈퍼/서브타입을 개별 테이블로 분리하거나 하나의 테이블로 병합하는 방식으로 결정됨
		- 테이블 분할
			- 수직 분할 : 디스크 I/O의 분산을 위해 테이블을 칼럼 단위로 분리함, 많은 칼럼을 가진 테이블에서 프로세스가 칼럼 유형마다 다르게 발생하는 경우, 테이블을 칼럼 단위로 분리하는 설계 방식임
			- 수평 분할 : 디스크 I/O의 분산을 위해 테이블을 로우 단위로 분리함, 테이블이 많은 양의 데이터를 가질 것으로 예상되는 경우 데이터 행을 기준으로 분리하여 관리하는 방법, 파티셔닝이라고도 함
				- 범위 파티션 : 데이터를 특정 범위로 나누는 방식 ex) 고객 번호를 기준으로 1~100, 101~200
				- 리스트 파티션 : 데이터를 특정 값으로 나누는 방식 ex) 지역 기준 서울,부산등
				- 해시 파티션 : 해시 함수를 사용하여 데이터를 고르게 분산하는 방식 ex) 고객 아이디를 해시 함수로 계산하여 데이터를 파티션에 분배, 해시 함수 : 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수
		- 테이블 추가
			- 중복 테이블 추가 : 원격 조인(다른 서버간의 조인)을 제거하기 위해 동일한 테이블 구조를 중복시킴
			- 통계 데이블 추가 : SUM,AVG 등 통계값을 미리 계산하여 저장함
			- 이력 테이블 추가 : 이력 테이블 중 일부 레코드를 마스터 테이블에서 중복 관리함, 특정 데이터의 최근 값을 자주 조회하는 경우 이를 효율적으로 처리하기 위해 최근 값을 모아 중복 속성을 생성한 테이블을 활용할 수 있다
			- 부분 테이블 추가 : 하나의 테이블에서 집중적으로 이용되는 칼럼들만 추출하여 별도의 테이블을 생성(테이블 수직분할과 유사, 원본 테이블 유지가 차이점), 원본 테이블을 유지하며 추가적인 테이블을 통해 특정 데이터에 빠르게 접근할 수 있도록 한다
	
	- 관계 반정규화
		- 중복 관계 추가 : 조인을 통해 정부 조회가 가능하지만 조인 연산이 자주 발생하거나 성능 저하가 우려 될 때 조인 경로를 단축하기 위하여 테이블 간 중복 관계를 추가하는 반정규화 기법
